-- Get most played games by ownership
SELECT NAME, COUNT(VIDEOGAME_ID)
FROM VIDEOGAME JOIN OWNS USING (VIDEOGAME_ID)
GROUP BY NAME, VIDEOGAME_ID
ORDER BY COUNT(VIDEOGAME_ID) DESC;


-- Get game by genre, tag, category, publisher and developer
SELECT VIDEOGAME.NAME
FROM VIDEOGAME JOIN BELONGS_TO_GEN USING (VIDEOGAME_ID) JOIN GENRE USING (GENRE_ID)
    JOIN BELONGS_TO_CAT USING (VIDEOGAME_ID) JOIN CATEGORY USING (CATEGORY_ID)
    JOIN DEVELOPS USING (VIDEOGAME_ID) JOIN DEVELOPER USING (DEVELOPER_ID)
    JOIN PUBLISHES USING (VIDEOGAME_ID) JOIN PUBLISHER USING (PUBLISHER_ID)
    JOIN TAGGED_WITH USING (VIDEOGAME_ID) JOIN TAG USING (TAG_ID)
WHERE GENRE.NAME = 'Action' AND CATEGORY.NAME = 'Online Multi-Player'
    AND PUBLISHER.NAME = 'Valve' AND DEVELOPER.NAME = 'Valve'
    AND TAG.NAME = 'Multiplayer';


-- Get friends of friends of a user
SELECT u3.USERNAME
FROM "USER" u1 JOIN FRIENDS_WITH fw1 ON (fw1.USER1_ID = u1.USER_ID OR fw1.USER2_ID = u1.USER_ID)
    JOIN "USER" u2 ON (fw1.USER1_ID = u2.USER_ID OR fw1.USER2_ID = u2.USER_ID)
    JOIN FRIENDS_WITH fw2 ON (fw2.USER1_ID = u2.USER_ID OR fw2.USER2_ID = u2.USER_ID)
    JOIN "USER" u3 ON (fw2.USER1_ID = u3.USER_ID OR fw2.USER2_ID = u3.USER_ID)
WHERE
    u1.USER_ID = 23478 AND u1.USER_ID != u2.USER_ID AND u1.USER_ID != u3.USER_ID AND u2.USER_ID != u3.USER_ID;


-- Get friend recommendation based on how many of the ten most played games of a user they own
SELECT u1.USERNAME, u1.USER_ID, COUNT(*)
FROM "USER" u1 JOIN OWNS o1 ON u1.USER_ID = o1.USER_ID
    JOIN VIDEOGAME v1 ON o1.VIDEOGAME_ID = v1.VIDEOGAME_ID
WHERE v1.VIDEOGAME_ID IN (
    SELECT v2.VIDEOGAME_ID
    FROM "USER" u2 JOIN OWNS o2 ON u2.USER_ID = o2.USER_ID
        JOIN VIDEOGAME v2 ON o2.VIDEOGAME_ID = v2.VIDEOGAME_ID
    WHERE u2.USER_ID = 23478
    ORDER BY o2.PLAYTIME DESC
    FETCH FIRST 10 ROW ONLY)
    AND u1.USER_ID != 23478
GROUP BY u1.USERNAME, u1.USER_ID
HAVING COUNT(*) >=2;


-- Get game recommendation based on players who played a chosen game
SELECT v1.Name, COUNT(v1.VIDEOGAME_ID)
FROM VIDEOGAME v JOIN OWNS o ON v.VIDEOGAME_ID = o.VIDEOGAME_ID JOIN "USER" u ON o.USER_ID = u.USER_ID
    JOIN OWNS o1 ON u.USER_ID = o1.USER_ID JOIN VIDEOGAME v1 ON o1.VIDEOGAME_ID = v1.VIDEOGAME_ID
WHERE v.VIDEOGAME_ID != v1.VIDEOGAME_ID
    AND v.NAME = 'Snakebird'
GROUP BY v1.Name, v1.VIDEOGAME_ID
ORDER BY COUNT(v1.VIDEOGAME_ID) DESC;


-- Get game recommendation based on the three most played games of a user (2 Tags match, min -30% Ownership)
SELECT tw2.VIDEOGAME_ID, COUNT(DISTINCT (tw2.TAG_ID)) AS Common_Tags
FROM VIDEOGAME v1
    JOIN TAGGED_WITH tw1 ON v1.VIDEOGAME_ID = tw1.VIDEOGAME_ID
    JOIN TAGGED_WITH tw2 ON tw1.TAG_ID = tw2.TAG_ID
WHERE v1.VIDEOGAME_ID IN(
        SELECT v3.VIDEOGAME_ID
        FROM "USER" u3 JOIN OWNS o3 ON u3.USER_ID = o3.USER_ID
            JOIN VIDEOGAME v3 ON o3.VIDEOGAME_ID = v3.VIDEOGAME_ID
        WHERE u3.USER_ID = 23478
        ORDER BY o3.PLAYTIME DESC
        FETCH FIRST 3 ROW ONLY
    )
    AND v1.VIDEOGAME_ID != tw2.VIDEOGAME_ID
    AND (SELECT COUNT(DISTINCT USER_ID)
         FROM OWNS o4
         WHERE o4.VIDEOGAME_ID = tw2.VIDEOGAME_ID) >=
        ((SELECT COUNT(DISTINCT USER_ID)
         FROM OWNS o5
         WHERE o5.VIDEOGAME_ID = v1.VIDEOGAME_ID) * 0.7)
GROUP BY v1.VIDEOGAME_ID, tw2.VIDEOGAME_ID
HAVING COUNT(DISTINCT (tw2.TAG_ID)) >= 2
ORDER BY COUNT(DISTINCT (tw2.TAG_ID)) DESC;



-- For In-Memory:
ALTER SYSTEM SET SGA_TARGET=10G scope=spfile;
ALTER SYSTEM SET inmemory_size=5G scope=spfile;
-- Restart database afterwards

ALTER TABLE VIDEOGAME INMEMORY MEMCOMPRESS FOR QUERY LOW PRIORITY CRITICAL ;
ALTER TABLE TAGGED_WITH INMEMORY MEMCOMPRESS FOR QUERY LOW PRIORITY CRITICAL;
ALTER TABLE OWNS INMEMORY MEMCOMPRESS FOR QUERY LOW PRIORITY CRITICAL;
ALTER TABLE "USER" INMEMORY MEMCOMPRESS FOR QUERY LOW PRIORITY CRITICAL;
ALTER TABLE FRIENDS_WITH INMEMORY MEMCOMPRESS FOR QUERY LOW PRIORITY CRITICAL;

SELECT SEGMENT_NAME, POPULATE_STATUS FROM V$IM_SEGMENTS WHERE SEGMENT_NAME = 'VIDEOGAME';

ALTER TABLE VIDEOGAME NO INMEMORY;
ALTER TABLE TAGGED_WITH NO INMEMORY;
ALTER TABLE OWNS NO INMEMORY;
ALTER TABLE "USER" NO INMEMORY;
ALTER TABLE FRIENDS_WITH NO INMEMORY;


